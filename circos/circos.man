CIRCOS(1)             User Contributed Perl Documentation            CIRCOS(1)



NNAAMMEE
                                           ____ _
                                          / ___(_)_ __ ___ ___  ___
                                         | |   | | '__/ __/ _ \/ __|
                                         | |___| | | | (_| (_) \__ \
                                          \____|_|_|  \___\___/|___/

                                                       round is good

       circos - generate circularly composited information graphics

SSYYNNOOPPSSIISS
         # guess location of configuration file
         circos

         # use specific configuration file
         circos -conf circos.conf [-silent]

         # diagnose required modules
         circos -modules

         # man page
         circos -man

         # detailed debugging for code components
         # see http://www.circos.ca/documentation/tutorials/configuration/debugging
         circos -debug_group GROUP1,[GROUP2,...]

         # full debugging
         circos -debug_group _all

         # configuration dump of a block (or block tree) of
         # any parameters that match REGEXP (optional)
         circos -cdump [BLOCK1/[BLOCK2/...]]{:REGEXP}

         # overriding configuration parameters
         circos -param image/radius=2000p -param ideogram/show=no

         # for fun - randomize all colors in the image except for
         # COLOR1 and COLOR2
         circos -randomcolor COLOR1,[COLOR2,...]

DDEESSCCRRIIPPTTIIOONN
       Circos is for visualizing data in a circular layout, ideal for
       exploring relationships between objects or positions. There are other
       reasons why a circular layout is advantageous, not the least being the
       fact that it is attractive.

       Circos is not a solution. It’s a tool to solve visualization problems.
       For a given problem, you are not guaranteed that it’s appropriate.

       You have fine control over how each data element is displayed, helping
       you to match salience to pertinence.

CCOONNFFIIGGUURRAATTIIOONN
       Settings are meant to be passed using a plain-text configuration file.
       This file can be created manually or by another script, which allows
       Circos to be fully automated.

       For full documentation, see

         L<http://www.circos.ca/documentation/tutorials>

   SSyynnttaaxx
       Configuration is plain-text and composed of hierarchical blocks. Some
       blocks, such as "<ideogram"> are mandatory, while others like
       "<backgrounds"> are optional.

       To get started, refer to the quick guide tutorial.

         L<http://www.circos.ca/documentation/tutorials/quick_guide>

       A typical configuration file might look like this

         # image size and format
         <image>
          ...
         </image>

         # position and size of ideograms
         <ideogram>
          ...
         </ideogram>

         # position, type and format of data tracks
         <plots>
          <plot>
            ...
          </plot>
          ...
         </plots>

         # colors, fonts and fill patterns
         <<include etc/colors_fonts_patterns.conf>>

         # system parameters
         <<include etc/housekeeping.conf>>

   MMoodduullaarriittyy
       The "<<include FILE">> directive imports one configuration file into
       another. This facility helps to keep configuration files modular.

       Parameter definitions that do not frequently change, such as color and
       font definitions, are conventionally imported from files found in _e_t_c_/
       in the distribution.

       In the tutorials, you’ll find that the "<ideogram"> and "<ticks">
       blocks are imported into the main configuration file. Because these
       blocks can get quite large, the main configuration file is more legible
       if they are relegated to separate files.

   OOvveerrrriiddiinngg wwiitthh **
       To override a parameter that has been included from a file, use the "*"
       suffix. The suffix is required because multiple definitions of a
       parameter are not allowed, except in cases where a parameter is may
       have more than one value.

         <image>
         # included file defines 'radius'
         <<include etc/image.conf>>
         # this will override the radius value
         radius* = 2500p
         </image>

       The "*" suffix can be repeated to specify which value takes precedence
       in a block.

         radius = 1500p
         radius* = 2500p
         radius** = 3000p # this instance of radius will be used

   OOvveerrrriiddiinngg wwiitthh CCoommmmaanndd LLiinnee
       Any configuration parameter in a unique block name can be specified on
       the command line using

         -param PATH/PARAM=value

       For example,

         <ideogram>
           show = no
           ...
         </ideogram>

         -param ideogram/show=no

       and

         <ideogram>
           <spacing>
             default = 0.01r
           </spacing>
           ...
         </ideogram>

         -param ideogram/spacing/default=0.01r

       When _c_o_n_f_(_) is used in the configuration file to retrieve the value of
       a parmameter (any parameter, not just those set by -param), you get a
       flexible system for changing the configuration at the command line.

         species = human
         karytotype = data/karyotype/karyotype.conf(species).txt

         -param species=rat

       Multiple parameters can be redefined, each with its own "-param" flag

         -param show_ticks=no -param image/radius=2000p

   MMeerrggiinngg BBlloocckkss
       Multiple instances of the following blocks are automatically merged:
       "<ideogram">, "<colors">, "<fonts">, "<paterns">, "<image">, "<links">,
       "<plots"> and "<highlights">.

       The purpose of this is to allow you to add to canonical definitions.

         # this file defines default <colors>, <fonts> and <patterns>
         <<include etc/colors_fonts_patterns.conf>>

         # add to the colors block
         <colors>
         mycolor = 150,25,25
         </colors>

OOPPTTIIOONNSS
   CCoonnffiigguurraattiioonn
       -configfile FILE
           Name of configuration file. This is required.

           Circos will attempt to guess the location of this file, searching
           for "circos.conf" in ".", "..", and "../..".

   OOuuttppuutt FFoorrmmaatt
       -png, -nopng
       -svg, -nosvg
           Toggles output of PNG and SVG files.

   IImmaaggee EElleemmeennttss
       -show_ticks, -noshow_ticks
       -show_tick_labels, -noshow_tick_labels
           Override the display of ticks and their labels. These are both
           usually defined in the <ticks> block.

   OOuuttppuutt PPaatthhss
       -outputdir DIR, -dir DIR
       -outputfile FILE, -file FILE
           Change the output directory and filename. The FILE can contain a
           path.

   DDeebbuuggggiinngg
       -debug
           Turn on basic debugging output. Reports information from

             image, io, layer, summary, timer

           debug groups (see below).

       -debug_group {+-}GROUP1,[{+-}GROUP2,...]
           Turn on debugging output for specific groups. For a list of groups,
           see

             L<http://www.circos.ca/documentation/tutorials/configuration/debugging>

           To add a group to the output prefix it with +. To remove it, with
           -.

             # use default debugging groups but exclude layer and io
             -debug -debug_group -layer,-io

             # use default debugging groups and add spacing
             -debug -debug_group +spacing

             # explicitly specify the groups
             -debug_group png,io,timer

           To list the groups that are supported, use the flag without an
           argument

             -debug_group

       -time
           Report timing information. Same as -debug_group +timer

       -silent
           Generate no reporting.

       -paranoid, -noparanoid
           Run in paranoid mode (default), or not. The default for this
           setting is defined by ’paranoid’ in etc/housekeeping.conf.

       -warnings, -nowarnings
           Display warnings, or not (default). The default for this setting is
           defined by ’warnings’ in etc/housekeeping.conf.

       -fakeerror =item -fakeerror CAT =item -fakeerror ,ID =item -fakeerror
       CAT,ID
           Fake an error by displaying the error message for category CAT and
           error name ID. If one or neither are specified, lists which errors
           are available.

           Unless you truly enjoy seeing error messages, there should be
           little reason for you to want to use this.

   UUssaaggee
       -version
           Show the version.

       -help
           Show brief usage synopsis.

       -man
           Show man page.

   GGooooffiinngg AArroouunndd
       -randomcolor [color1,color2,...]
           Randomize the color of every element in the image, except for an
           optional list of colors.

           For example, to keep the background white and anything that is
           black,

             -randomcolor white,black

AAUUTTHHOORR
       Martin Krzywinski martink@bcgsc.ca <http://mkweb.bcgsc.ca>

RREESSOOUURRCCEESS
       <http://www.circos.ca>

CCIITTIINNGG
       If you are using Circos in a publication, please cite as

       Krzywinski, M., J. Schein, I. Birol, J. Connors, R. Gascoyne, D.
       Horsman, S. Jones, and M. Marra. 2009. Circos: an Information Aesthetic
       for Comparative Genomics. Genome Res 19:1639-1645.

CCOONNTTRRIIBBUUTTOORRSS
       Ken Youens-Clark kyclark@gmail.com

SSEEEE AALLSSOO
       Hive plots <http://www.hiveplot.com>

CCOOPPYYRRIIGGHHTT && LLIICCEENNSSEE
       Copyright 2004-2014 Martin Krzywinski, all rights reserved.

       This file is part of the Genome Sciences Centre Perl code base.

       This script is free software; you can redistribute it and/or modify it
       under the terms of the GNU General Public License as published by the
       Free Software Foundation; either version 2 of the License, or (at your
       option) any later version.

       This script is distributed in the hope that it will be useful, but
       WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
       General Public License for more details.

       You should have received a copy of the GNU General Public License along
       with this script; if not, write to the Free Software Foundation, Inc.,
       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



perl v5.10.1                      2014-10-02                         CIRCOS(1)
